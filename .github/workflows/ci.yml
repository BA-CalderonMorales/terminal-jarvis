name: Continuous Integration

on:

  push:
    branches: [ "main", "develop", "feat/*", "bug/*", "security/*", "hotfix/*" ]

  pull_request:
    branches: [ "main", "develop", "feat/*", "bug/*", "security/*", "hotfix/*" ]

env:
  CARGO_TERM_COLOR: always

jobs:

  test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

  security:
    name: Security Audit
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies for cargo-audit
      run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo-audit
      run: cargo audit --deny warnings

  secrets-scan:
    name: Secrets Scan (gitleaks)
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: --verbose --redact

  cargo-deny:
    name: Cargo Deny (advisories, bans, sources)
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Run cargo-deny checks
      uses: EmbarkStudios/cargo-deny-action@v2
      with:
        command: check advisories bans sources

  shellcheck:
    name: Shell Script Lint (shellcheck)
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install ShellCheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
    - name: Run ShellCheck
      run: |
        set -e
        if [ -d scripts ]; then
          find scripts -type f -name "*.sh" -print0 | xargs -0 -r shellcheck -S style -x
        fi

  sbom-scan:
    name: SBOM and Vulnerability Scan (Anchore)
    needs: [test, security, secrets-scan, cargo-deny, shellcheck]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Scan workspace with Anchore
      uses: anchore/scan-action@v4
      with:
        path: .
        fail-build: true
        severity-cutoff: high

  npm-test:
    name: NPM Package-Related Tests
    needs: [test, security, secrets-scan, cargo-deny, shellcheck, sbom-scan]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
 
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
 
    - name: Build release binary
      run: cargo build --release
 
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
 
    - name: Install dependencies
      run: |
        cd npm/terminal-jarvis
        npm install
 
    - name: Build TypeScript
      run: |
        cd npm/terminal-jarvis
        npm run build
 
    - name: Lint NPM Package
      run: |
        cd npm/terminal-jarvis
        npm run lint

    - name: Ensure jq is installed
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: NPM Audit (high severity)
      run: |
        cd npm/terminal-jarvis
        npm audit --audit-level=high --json | jq '.' > npm-audit.json || true
        # Fail build if high/critical vulnerabilities are present
        HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json); \
        CRIT=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json); \
        echo "High: $HIGH, Critical: $CRIT"; \
        [ $((HIGH+CRIT)) -eq 0 ]

  # Multi-platform build testing - can run independently of other jobs
  multiplatform-build:
    name: Multi-Platform Build Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            cross_target: aarch64-apple-darwin

          - os: macos-latest  
            target: aarch64-apple-darwin
            cross_target: x86_64-unknown-linux-gnu

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross_target: aarch64-unknown-linux-gnu
 
    steps:
    - uses: actions/checkout@v4
 
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }},${{ matrix.cross_target }}
 
    - name: Test multi-platform build system
      run: |
        chmod +x scripts/utils/build-multiplatform.sh
        ./scripts/utils/build-multiplatform.sh --current-only
 
    - name: Test cross-compilation (may fail)
      continue-on-error: true
      run: |
        echo "Testing cross-compilation to ${{ matrix.cross_target }}"
        cargo build --target ${{ matrix.cross_target }} || echo "Cross-compilation failed (expected)"
 
    - name: Test Homebrew release generation (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        chmod +x scripts/utils/generate-homebrew-release.sh
        ./scripts/utils/generate-homebrew-release.sh || echo "Homebrew generation completed with warnings"
